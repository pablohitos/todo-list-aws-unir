pipeline {
    agent none

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        S3_BUCKET = 'staging-todo-list-aws-pablo'
        STACK_NAME = 'staging-todo-list-aws'
        STAGE = 'default'
    }

    stages {
        stage('Checkout') {
            agent any
            steps {
                echo 'Clonando repositorio...'
                git credentialsId: 'github-token', url: 'https://github.com/pablohitos/todo-list-aws-unir', branch: 'develop'
            }
        }

        stage('An치lisis Est치tico - Flake8') {
            agent { label 'agent-estatico' }
            steps {
                echo 'Ejecutando Flake8...'
                sh 'flake8 src --format=default --exit-zero > flake8-report.txt'
                archiveArtifacts artifacts: 'flake8-report.txt'
            }
        }

        stage('An치lisis de Seguridad - Bandit') {
            agent { label 'agent-estatico' }
            steps {
                echo 'Ejecutando Bandit...'
                sh 'bandit -r src -f json -o bandit-report.json || true'
                archiveArtifacts artifacts: 'bandit-report.json'
            }
        }

        stage('Despliegue Staging') {
            agent any
            steps {
                echo 'Desplegando entorno Staging...'
                sh 'sam build'
                sh 'sam validate --region ${AWS_DEFAULT_REGION}'
                sh '''
                    sam deploy \
                        --stack-name ${STACK_NAME} \
                        --s3-bucket ${S3_BUCKET} \
                        --capabilities CAPABILITY_IAM \
                        --region ${AWS_DEFAULT_REGION} \
                        --parameter-overrides Stage=${STAGE} \
                        --no-fail-on-empty-changeset
                '''
            }
        }

        stage('Pruebas REST con Pytest') {
            agent { label 'agent-api' }
            steps {
                script {
                    def url = sh(script: "aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query \"Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue\" --output text", returnStdout: true).trim()
                    env.BASE_URL = url
                }
                echo "BASE_URL obtenido: ${env.BASE_URL}"
                sh '''
                    export PYTHONPATH=:$WORKSPACE/src
                    pytest test/ --junitxml=result.xml
                '''
                junit 'result.xml'
            }
        }

        stage('Promoci칩n a main') {
            agent any
            steps {
                echo 'Promoviendo a main...'
                withCredentials([usernamePassword(credentialsId: 'github-token-userpass', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                    sh '''
                        git config --global user.email "jenkins@example.com"
                        git config --global user.name "Jenkins"
                        git checkout main
                        git merge develop
                        git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/pablohitos/todo-list-aws-unir main
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline CI distribuido finalizado.'
        }
    }
}
